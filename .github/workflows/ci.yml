name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '7.0'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_DATABASE: tech-challenge-blog-test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Instalar dependências
      run: npm ci

    - name: Executar linting
      run: npm run lint --if-present

    - name: Executar testes
      run: npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/tech-challenge-blog-test

    - name: Gerar relatório de cobertura
      run: npm run test:coverage --if-present

    - name: Upload cobertura para Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Executar auditoria de segurança
      run: npm audit --audit-level=moderate

    - name: Executar Snyk para verificar vulnerabilidades
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Fazer login no Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Construir e enviar imagem Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/tech-challenge-blog:latest
          ${{ secrets.DOCKER_USERNAME }}/tech-challenge-blog:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, docker-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment: production
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Fazer deploy para produção
      run: |
        echo "Deploy para produção seria executado aqui"
        echo "Exemplos de deploy:"
        echo "- Deploy para AWS ECS/Fargate"
        echo "- Deploy para Google Cloud Run"
        echo "- Deploy para Azure Container Instances"
        echo "- Deploy para Kubernetes"
        echo "- Deploy para DigitalOcean App Platform"
        
    # Exemplo de deploy para AWS (descomente se necessário)
    # - name: Configurar AWS CLI
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: us-east-1
    #
    # - name: Deploy para ECS
    #   run: |
    #     aws ecs update-service \
    #       --cluster tech-challenge-cluster \
    #       --service tech-challenge-service \
    #       --force-new-deployment

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notificar resultado do deploy
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deploy realizado com sucesso!"
        else
          echo "❌ Falha no deploy"
        fi
